{
  "info": {
    "_postman_id": "423dfaf5-3b74-488c-bf5b-255fd88eedf3",
    "name": "Note API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "24512462"
  },
  "item": [
    {
      "name": "Login with Invalid Username",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('should response 400 status code', () => {\r",
              "    pm.response.to.have.status(400);\r",
              "});\r",
              "\r",
              "pm.test('should respose with correct property and message', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "    pm.expect(responseJson.message).to.be.an('string');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"username\": \"xxxx\",\r\n    \"password\": \"{{password}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{host}}:{{port}}/auths",
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["auths"]
        }
      },
      "response": []
    },
    {
      "name": "Login with Valid Credential",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('should response 201 status code', () => {\r",
              "    pm.response.to.have.status(201);\r",
              "});\r",
              "\r",
              "pm.test('should respose with correct property and message', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "    pm.expect(responseJson.data).to.be.an('object');\r",
              "    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
              "\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{host}}:{{port}}/auths",
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["auths"]
        }
      },
      "response": []
    },
    {
      "name": "Refresh accessToken with Valid refreshToken",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('should response 200 status code', () => {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test('should response with corrent message and property', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "    pm.expect(responseJson.data).to.be.an('object');\r",
              "    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
              "    pm.expect(responseJson.data.accessToken).to.not.equals('');\r",
              "\r",
              "    pm.environment.set('accessToken', responseJson.data.accessToken);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{host}}:{{port}}/auths/refresh",
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["auths", "refresh"]
        }
      },
      "response": []
    },
    {
      "name": "Add Note",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('should response 201 status code', () => {\r",
              "    pm.response.to.have.status(201);\r",
              "});\r",
              "\r",
              "pm.test('should response with corrent message and property', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "    pm.expect(responseJson.data).to.be.an('object');\r",
              "    pm.expect(responseJson.data.noteId).to.be.an('number');\r",
              "    pm.expect(responseJson.data.message).to.be.a('string');\r",
              "    pm.expect(responseJson.data.message).to.not.equals('');\r",
              "\r",
              "    pm.environment.set('noteId', responseJson.data.noteId);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"title\": \"note added\",\r\n    \"desc\": \"note added\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{host}}:{{port}}/notes",
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["notes"]
        }
      },
      "response": []
    },
    {
      "name": "Get Notes",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('should response 200 status code', () => {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test('should response with corrent message and property', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "    pm.expect(responseJson.notes).to.be.an('array');\r",
              "    pm.expect(responseJson.notes).to.have.length(5);\r",
              "    pm.expect(responseJson.currentPage).to.be.a('number');\r",
              "    pm.expect(responseJson.totalPages).to.be.a('number');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{host}}:{{port}}/notes",
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["notes"]
        }
      },
      "response": []
    },
    {
      "name": "Get Note By Id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('should response 200 status code', () => {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test('should response with corrent message and property', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "    pm.expect(responseJson.id).to.be.an('number');\r",
              "    pm.expect(responseJson.title).to.be.a('string');\r",
              "    pm.expect(responseJson.desc).to.be.a('string');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{host}}:{{port}}/notes/{{noteId}}",
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["notes", "{{noteId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Update Note",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('should response 200 status code', () => {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test('should response with corrent message and property', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "    pm.expect(responseJson.message).to.be.an('string');\r",
              "    pm.expect(responseJson.message).to.not.equals('');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"title\": \"note updated\",\r\n    \"desc\": \"note updated\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://{{host}}:{{port}}/notes/{{noteId}}",
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["notes", "{{noteId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Delete Note",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('should response 200 status code', () => {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test('should response with corrent message and property', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "    pm.expect(responseJson.message).to.be.an('string');\r",
              "    pm.expect(responseJson.message).to.not.equals('');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://{{host}}:{{port}}/notes/{{noteId}}",
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["notes", "{{noteId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Get Notes Without JWT accessToken",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('should response 200 status code', () => {\r",
              "    pm.response.to.have.status(401);\r",
              "});\r",
              "\r",
              "pm.test('should response with corrent message and property', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "    pm.expect(responseJson.message).to.be.an('string');\r",
              "    pm.expect(responseJson.message).to.not.equals('');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{host}}:{{port}}/notes?title=&page=1",
          "protocol": "http",
          "host": ["{{host}}"],
          "port": "{{port}}",
          "path": ["notes"],
          "query": [
            {
              "key": "title",
              "value": ""
            },
            {
              "key": "page",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    }
  ]
}
